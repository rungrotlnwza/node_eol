const bcrypt = require('bcrypt')
const pool = require('../config/connect') // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ pool ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á await

module.exports = async (req, res) => {
  const { username, password, confirm } = req.body

  if (!username || !password || !confirm) {
    return res.status(400).json({ error: "Incomplete information" })
  }

  if (password !== confirm) {
    return res.status(400).json({ error: "password is not mate" })
  }

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö username ‡∏ã‡πâ‡∏≥
    const [existingUser] = await pool.query(
      "SELECT * FROM user WHERE m_username = ?",
      [username]
    )

    if (existingUser.length > 0) {
      return res.status(400).json({ error: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß" })
    }

    // Hash password
    const passwordHash = await bcrypt.hash(password, 10)

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
    await pool.query(
      "INSERT INTO user (m_username, m_password, m_role) VALUES (?, ?, ?)",
      [username, passwordHash, 'user']
    )

    res.status(201).json({ success: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!" })

  } catch (error) {
    console.error("üö® Error:", error)
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" })
  }
}